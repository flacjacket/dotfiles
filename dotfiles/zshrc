# wayland
export XDG_RUNTIME_DIR=/tmp/.runtime-${USER}
mkdir -p "${XDG_RUNTIME_DIR}"
chmod 0700 "${XDG_RUNTIME_DIR}"

if [[ $- != *i* ]] ; then
    return
fi

export ECHANGELOG_USER="Sean Vig <sean.v.775@gmail.com>"

# pylearn2
export PATH=$PATH:~/.local/bin

# Launch tmux session
if [[ -z "$TMUX"  && "x$TERM" == "xrxvt-256color" ]]; then
    tmux has-session 2>&1 &> /dev/null
    [[ $? -eq 0 ]] && exec tmux attach || exec tmux
fi

# Get '/' out of WORDCHARS
WORDCHARS=${WORDCHARS//[\/]}

# Main prompt

export PROMPT="%B%F{green}%n@%m%k %B%F{blue}%~ %# %b%f%k"

# Right prompt for git stuff

setopt prompt_subst
autoload -Uz vcs_info
zstyle ':vcs_info:*' stagedstr 'M'
zstyle ':vcs_info:*' unstagedstr 'M'
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' actionformats '%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '
zstyle ':vcs_info:*' formats       '%F{2}%c%F{3}%u%f %F{5}[%F{2}%b%F{5}]'
zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'
zstyle ':vcs_info:git*+set-message:*' hooks git-untracked
+vi-git-untracked() {
  if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && git status --porcelain | grep '??' &> /dev/null ; then
    hook_com[unstaged]+='%F{1}?%f'
  fi
}

zstyle ':vcs_info:*' enable git

# or use pre_cmd, see man zshcontrib
vcs_info_wrapper() {
  vcs_info
  if [ -n "$vcs_info_msg_0_" ]; then
    echo "%{$fg[grey]%}${vcs_info_msg_0_}%{$reset_color%}$del"
  fi
}
RPROMPT=$'$(vcs_info_wrapper)'

# Autocompletion
autoload -U compinit
compinit

# setup key accordingly
typeset -g -A key

key[F1]='^[OP'
key[F2]='^[OQ'
key[F3]='^[OR'
key[F4]='^[OS'
key[F5]='^[[15~'
key[F6]='^[[17~'
key[F7]='^[[18~'
key[F8]='^[[19~'
key[F9]='^[[20~'
key[F10]='^[[21~'
key[F11]='^[[23~'
key[F12]='^[[24~'
key[Backspace]='^?'
key[Insert]='^[[2~'
key[Home]='^[[1~'
key[PageUp]='^[[5~'
key[Delete]='^[[3~'
key[End]='^[[4~'
key[PageDown]='^[[6~'
key[Up]='^[[A'
key[Left]='^[[D'
key[Down]='^[[B'
key[Right]='^[[C'
key[Menu]=''''

bindkey "${key[Backspace]}" backward-delete-char
bindkey "${key[Home]}" beginning-of-line
bindkey "${key[End]}" end-of-line
bindkey "${key[Insert]}" overwrite-mode
bindkey "${key[Delete]}" delete-char
bindkey "${key[PageUp]}" beginning-of-buffer-or-history
bindkey "${key[PageDown]}" end-of-buffer-or-history

bindkey "^[${key[Backspace]}" backward-delete-word
bindkey "^[${key[Left]}" backward-word
bindkey "^[${key[Right]}" forward-word

bindkey "^[b" backward-word
bindkey "^[f" forward-word
bindkey "^[d" backward-delete-word

# virtualenv wrapper
#export WORKON_HOME=~/.venvs
#source /usr/bin/virtualenvwrapper.sh

if [[ -f ~/.dir_colors ]] ; then
    eval $(dircolors -b ~/.dir_colors)
elif [[ -f /etc/DIR_COLORS ]] ; then
    eval $(dircolors -b /etc/DIR_COLORS)
fi

alias ls='ls --color=auto'
alias grep='grep --colour=auto'
alias egrep='egrep --colour=auto'
alias fgrep='fgrep --colour=auto'

alias repo-commit='repoman commit --if-modified y -m'

# Enable history
HISTFILE=~/.histfile
HISTSIZE=10000
SAVEHIST=10000

setopt appendhistory
setopt sharehistory
setopt hist_ignore_dups
setopt histignorespace

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
#if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
#    function zle-line-init () {
#        printf '%s' "${terminfo[smkx]}"
#    }
#    function zle-line-finish () {
#        printf '%s' "${terminfo[rmkx]}"
#    }
#    zle -N zle-line-init
#    zle -N zle-line-finish
#fi
